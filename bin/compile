#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# clean up leaking environment
unset GIT_DIR

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

source $BUILD_DIR/_git.cfg

if [[ ! $GIT_VERSION ]]; then
  GIT_VERSION=1.8.1.4
fi

BIN_DIR=$BUILD_DIR/vendor/git-$GIT_VERSION

if test -d $CACHE_DIR/vendor/git-$GIT_VERSION; then
  echo -n "-----> Using cached Git $GIT_VERSION..."
  cp -r $CACHE_DIR/vendor/git-$GIT_$VERSION $BIN_DIR/
  echo "       done."
else
  echo -n "-----> Cleaning cached Git versions..."
  rm -rf $CACHE_DIR/vendor/git-*
  echo "       done."

  echo -n "-----> Downloading Git $GIT_VERSION..."
  cd $BUILD_DIR
  curl --silent --location https://git-core.googlecode.com/files/git-$GIT_VERSION.tar.gz | tar xz
  cd git-$GIT_VERSION
  echo "       done."

  if [[ ! -d $BIN_DIR ]]; then
    mkdir -p $BIN_DIR
  fi

  echo -n "-----> Compiling Git..."
  make NO_TCLTK=YesPlease NO_PERL=YesPlease NO_GETTEXT=YesPlease NO_SVN_TESTS=YesPlease NO_MSGFMT=YesPlease NO_MSGFMT_EXTENDED_OPTIONS=YesPlease prefix=$BIN_DIR install clean | indent
  echo "       done."

  echo -n "-----> Cleaning up Git source files..."
  rm -rf $BUILD_DIR/git-$GIT_VERSION
  echo "       done."
  
  echo -n "-----> Caching Git binaries..."
  mkdir -p $CACHE_DIR/vendor/git-$GIT_$VERSION
  cp -r $BIN_DIR $CACHE_DIR/vendor/git-$GIT_$VERSION/
  echo "       done."
fi

export PATH=$BIN_DIR:$PATH
